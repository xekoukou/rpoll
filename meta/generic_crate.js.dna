var meta = (process.argv[2] == "meta");

var fs = require('fs');
var cheerio = require('cheerio');

//Get the name of the Project.
var xml_file = fs.readFileSync("./crate.xml", {
    encoding: "utf-8"
});
var $ = cheerio.load(xml_file, {
    xmlMode: true
});

var project_name = $("info").attr("name");
var project_type =$("crate").attr("type");

function obtain_dependencies() {
    
    //Dependencies
    var execSync = require('child_process').execSync;


    var paths = [[[],"."]];
    
    while(paths.length > 0) {
    
        var path = paths.pop();
    
        //Open dependency xml.
        var xml_file = fs.readFileSync(path[1] + "/crate.xml", {
            encoding: "utf-8"
        });
        var $ = cheerio.load(xml_file, {
            xmlMode: true
        });

//Point to current crate.
.var lmeta = this["mcrates"];
for( var i = 0; i < path[0].length; i++) {
./+[@{path[0][i]}]["mcrates"]
}
        
        $("dependencies dependency").each(function(){
            var dep = { 
                "name": $(this).attr("name"),
                "version": $(this).attr("version"),
                "git": $(this).attr("git"),
                "path": $(this).attr("path"),
                "meta": $(this).attr("meta"),
                "meta_args": $(this).attr("meta_args")
            };
    
            if((dep.git != undefined) &&(dep.path != undefined)) {
                console.log("Error:Dependency has both a git and a path property");
                process.exit(1);
            }
            if((dep.meta != undefined) &&(dep.git == undefined)) {
                console.log("Error:Meta dependency doesn't have a git property");
                process.exit(1);
            }
    
            if(dep.meta == undefined) {
.this.dependencies.push(@{JSON.stringify(dep)});
            } else {
    
        //Download repository if needed
                var tmp= dep.git.split("/");
                var usr = tmp[tmp.length-2];
                var prj = tmp[tmp.length-1].slice(0,-4);
                try {
                    fs.mkdirSync("./dependencies/"+usr); 
                } catch (e) {
                    if(e.code != "EEXIST") {
                        process.exit(1);
                    }
                }
                try {
                    fs.mkdirSync("./dependencies/"+usr+"/"+prj);
                    execSync("git clone " + dep.git + " ./dependencies/"+usr+"/"+prj  + " &>/dev/null");
                } catch (e) {
                    if(e.code != "EEXIST") {
                        process.exit(1);
                    }
                }
                paths.push([path.slice().push(dep.name),"./dependencies/"+usr+"/"+prj+"/meta"]);

.{
../!exec("./dependencies/@{usr+'/'+prj}/meta/crate.js.dna",[meta])
                if(dep.meta_args != undefined) {
.lmeta["@{dep.name}"] = new @{dep.name}(true,"./dependencies/@{usr+'/'+prj}/meta",@{dep.meta_args});
                } else {
.lmeta["@{dep.name}"] = new @{dep.name}(true,"./dependencies/@{usr+'/'+prj}/meta");
                }
.}
            }
        });
    }
}


./!dots(1)


function Crate(meta,path) {

    this.path = "";
    if( path != undefined) {
        this.path = path;
    }
    this.meta = meta;
    this.mcrates={};
    this.dependencies=[];
    this.generate_external_crate_prelude = generate_external_crate_prelude;
    
    
    //Dependencies
    var fs = require('fs');
    var cheerio = require('cheerio');
    
    //Open main project xml.
    var xml_file = fs.readFileSync(path + "./crate.xml", {
        encoding: "utf-8"
    });
    var $ = cheerio.load(xml_file, {
        xmlMode: true
    });
    
    this.proejct_type =$("crate").attr("type");
    this.project_name =$("info").attr("name");
    
    function generate_dependencies() {
    
        this.dependencies.forEach(function(dep){
.@{name} = {
            var properties = [];
            if(dep.version != undefined) {
                properties.push(' version = "'+dep.version+'"');
            }
            if(dep.git != undefined) {
                properties.push(' git = "'+dep.git+'"');
            }
            if(dep.path != undefined) {
                properties.push(' path = "'+dep.path+'"');
            }
./!separate(",")
            for (var i = 0;i < properties.length; i++) {
./+ @{properties[i]}
            }
    
./+ }
    
        });
.
    }
    
    function generate_cargo_toml() {
./!output("../Cargo.toml")
.[package]
        $("info").each(function(){
            var name = $(this).attr("name");
            var version = $(this).attr("version");
.name = "@{name}"
.version = "@{version}"
.authors = [
            var authors = [];
            $("authors author", this).each(function(){
                var name = $(this).attr("name");
                var email = $(this).attr("email");
                authors.push([name,email]);
            });
./!separate(",")
            for (var i = 0; i<authors.length; i++) {
./+"@{authors[i][0]} <@{authors[i][1]}>" 
            }
        });
./+]
    
    //Dependencies
.
.[dependencies]
        generate_dependencies();
    };
    
    function generate_external_crate_prelude() {
        this.dependencies.forEach(function(each){
            if(each.meta != true) {
.extern crate @{each.name};
            }
        });
    }
    
    //Parts that will generate an output whenever the crate object is initialized.
    
./!dots(-1)
    if(!meta) {
        obtain_dependencies();
    }
    
    if(meta) {
        try {
            fs.mkdirSync("../src/"+project_name);
        } catch(e){}
../!output("../src/@{project_name}/mod.rs")
    } else {
        switch (project_type) {
            case "binding": 
../!output("../src/lib.rs")
                break;
            case "executable":
../!output("../src/main.rs")
                break; 
        }
    }
./!dots(1)
    
    if(!meta) {
        generate_cargo_toml();
    }

}

